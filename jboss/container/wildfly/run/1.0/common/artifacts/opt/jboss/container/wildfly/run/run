#!/bin/bash

source "${JBOSS_CONTAINER_UTIL_LOGGING_MODULE}/logging.sh"
source "${JBOSS_CONTAINER_WILDFLY_RUN_MODULE}/run-utils.sh"

if [ ! -d "${JBOSS_HOME}" ]; then
    log_error "*** No installed Server, exiting ***"
    exit 1
fi

# Un-used, this is a hook to add JPMS options to JVM at startup.
# run_add_jpms_options

run_setup_shutdown_hook

#Detects launcher.
if [ -n "${SERVER_LAUNCH_SCRIPT_OVERRIDE}" ]; then
  echo "Using custom launcher ${SERVER_LAUNCH_SCRIPT_OVERRIDE}."
  actual_launcher="${SERVER_LAUNCH_SCRIPT_OVERRIDE}"
elif [ -f "${JBOSS_HOME}/bin/openshift-launch.sh" ]; then
    echo "Using openshift launcher."
    actual_launcher=openshift-launch.sh
elif [ -f "${JBOSS_HOME}/bin/standalone-cloud.sh" ]; then
    echo "Using cloud launcher."
    actual_launcher=standalone-cloud.sh
elif  [ -f "${JBOSS_HOME}/bin/standalone.sh" ]; then
    echo "Using standalone launcher."
    actual_launcher=standalone.sh
fi

# HANDLE JAVA OPTIONS
source /usr/local/dynamic-resources/dynamic_resources.sh > /dev/null
GC_METASPACE_SIZE=${GC_METASPACE_SIZE:-96}

JAVA_OPTS="$(adjust_java_options ${JAVA_OPTS})"

# If JAVA_DIAGNOSTICS and there is jvm_specific_diagnostics, move the settings to PREPEND_JAVA_OPTS
# to bypass the specific EAP checks done on JAVA_OPTS in standalone.sh that could remove the GC EAP specific log configurations
JVM_SPECIFIC_DIAGNOSTICS=$(jvm_specific_diagnostics)
if [ "x$JAVA_DIAGNOSTICS" != "x" ] && [ "x{JVM_SPECIFIC_DIAGNOSTICS}" != "x" ]; then
  JAVA_OPTS=${JAVA_OPTS/${JVM_SPECIFIC_DIAGNOSTICS} /}
  PREPEND_JAVA_OPTS="${JVM_SPECIFIC_DIAGNOSTICS} ${PREPEND_JAVA_OPTS}"
fi

# Make sure that we use /dev/urandom (CLOUD-422)
JAVA_OPTS="${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom"

JAVA_OPTS="${JAVA_OPTS} -Djava.net.preferIPv4Stack=true"

if [ -z "$JBOSS_MODULES_SYSTEM_PKGS" ]; then
  JBOSS_MODULES_SYSTEM_PKGS="jdk.nashorn.api,com.sun.crypto.provider"
fi

if [ -n "$JBOSS_MODULES_SYSTEM_PKGS_APPEND" ]; then
  JBOSS_MODULES_SYSTEM_PKGS="$JBOSS_MODULES_SYSTEM_PKGS,$JBOSS_MODULES_SYSTEM_PKGS_APPEND"
fi

 JAVA_OPTS="${JAVA_OPTS} -Djboss.modules.system.pkgs=${JBOSS_MODULES_SYSTEM_PKGS}"

# DO WE KEEP?
# White list packages for use in ObjectMessages: CLOUD-703
if [ -n "$MQ_SERIALIZABLE_PACKAGES" ]; then
  JAVA_OPTS="${JAVA_OPTS} -Dorg.apache.activemq.SERIALIZABLE_PACKAGES=${MQ_SERIALIZABLE_PACKAGES}"
fi

# Append to JAVA_OPTS.
JAVA_OPTS="$JAVA_OPTS $JAVA_OPTS_APPEND"

#Handle proxy options
if [ -f "${JBOSS_CONTAINER_JAVA_PROXY_MODULE}/proxy-options" ]; then
  source "${JBOSS_CONTAINER_JAVA_PROXY_MODULE}"/proxy-options
else
  source /opt/run-java/proxy-options
fi
eval preConfigure
eval configure

if [ "${actual_launcher}" == "openshift-launch.sh" ]; then
    PREPEND_JAVA_OPTS=$PREPEND_JAVA_OPTS JAVA_OPTS=$JAVA_OPTS $JBOSS_HOME/bin/${actual_launcher} &
    pid=$!
    wait $pid 2>/dev/null
else
    imgName=${JBOSS_IMAGE_NAME:-$IMAGE_NAME}
    imgVersion=${JBOSS_IMAGE_VERSION:-$IMAGE_VERSION}

    log_info "Running $imgName image, version $imgVersion"

    # Handle port offset
    if [ -n "${PORT_OFFSET}" ]; then
      PORT_OFFSET_PROPERTY="-Djboss.socket.binding.port-offset=${PORT_OFFSET}"
    fi

    PUBLIC_IP_ADDRESS=${SERVER_PUBLIC_BIND_ADDRESS:-$(hostname -i)}
    MANAGEMENT_IP_ADDRESS=${SERVER_MANAGEMENT_BIND_ADDRESS:-0.0.0.0}
    ENABLE_STATISTICS=${SERVER_ENABLE_STATISTICS:-true}

    #Ensure node name (FOR NOW NEEDED PERHAPS REVISIT FOR EAP8)
    run_init_node_name

    SERVER_ARGS="${JAVA_PROXY_OPTIONS} -Djboss.node.name=${JBOSS_NODE_NAME} -Djboss.tx.node.id=${JBOSS_TX_NODE_ID} ${PORT_OFFSET_PROPERTY} -b ${PUBLIC_IP_ADDRESS} -bmanagement ${MANAGEMENT_IP_ADDRESS} -Dwildfly.statistics-enabled=${ENABLE_STATISTICS} ${SERVER_ARGS}"

    if [ -n "${CLI_LAUNCH_SCRIPT}" ]; then
      if [ ! -f "${CLI_LAUNCH_SCRIPT}" ]; then
        scriptFile="${JBOSS_HOME}/${CLI_LAUNCH_SCRIPT}"
        if [ ! -f "${scriptFile}" ]; then
          log_error "${CLI_LAUNCH_SCRIPT} doesn't exist or is not a relative path inside ${JBOSS_HOME}"
          exit 1
        fi
      else
        scriptFile="${CLI_LAUNCH_SCRIPT}"
      fi
      log_info "Executing CLI script ${scriptFile} during server startup"
      markerDir=/tmp/server-cli-boot-hook-dir
      rm -rf "${markerDir}"
      mkdir "${markerDir}"
      bootHookOptions="--start-mode=admin-only -Dorg.wildfly.internal.cli.boot.hook.script=${scriptFile} -Dorg.wildfly.internal.cli.boot.hook.marker.dir=${markerDir}"
      outputLocation="${CLI_EXECUTION_OUTPUT:-/tmp/server-cli-execution-output-file.txt}"
      if [ "${outputLocation}" == "CONSOLE" ]; then
        log_info "CLI execution output displayed in the console"
      else
        rm -f "${outputLocation}"
        bootHookOptions="${bootHookOptions} -Dorg.wildfly.internal.cli.boot.hook.script.output.file=${outputLocation}"
        log_info "CLI execution output redirected to ${outputLocation}"
      fi

      SERVER_ARGS="${SERVER_ARGS}  ${bootHookOptions}"
    fi
    log_info "Starting server with arguments: ${SERVER_ARGS}"

    # The script must be launched in background for the server to not receive directly signals and allowing for CLI shutdown processed from this script.
    PREPEND_JAVA_OPTS=$PREPEND_JAVA_OPTS JAVA_OPTS=$JAVA_OPTS $JBOSS_HOME/bin/${actual_launcher} ${SERVER_ARGS} &
    pid=$!
    wait $pid 2>/dev/null
fi