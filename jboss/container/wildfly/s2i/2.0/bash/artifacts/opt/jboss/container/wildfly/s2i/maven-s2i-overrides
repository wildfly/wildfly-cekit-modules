source "${JBOSS_CONTAINER_UTIL_LOGGING_MODULE}/logging.sh"

function maven_s2i_custom_binary_build() {
  local serverDir="${S2I_SOURCE_DIR}/${S2I_SERVER_DIR:-server}"
  if [ -d "${serverDir}" ]; then
    log_info "S2I binary build, found server ${serverDir}"
    log_info "Copying server from $serverDir to $JBOSS_HOME..."
    cp -r "$serverDir" "$JBOSS_HOME"
  else
     log_info "S2I binary build, ${serverDir} not found, root dir must be a server home directory."
     if [ -f "${S2I_SOURCE_DIR}/jboss-modules.jar" ] && [ -d "${S2I_SOURCE_DIR}/modules" ]; then
       log_info "S2I binary build, server home detected, installing server."
       cp -r "${S2I_SOURCE_DIR}" "$JBOSS_HOME"
       # No copy can be operated in next steps, the binary content is only the server content. 
       source "${JBOSS_CONTAINER_WILDFLY_S2I_MODULE}/disabled-copy-hooks"
     else
      log_info "Checking if it is a managed service file"

      NUMBER_FILES="$(ls -1q "${S2I_SOURCE_DIR}"/*.war | wc -l)"
      if [ "${NUMBER_FILES}" -ne 1 ]; then
        log_error "Expected 1 file in ${S2I_SOURCE_DIR} but found ${NUMBER_FILES}, exiting."
        exit 1
      fi

      SOURCE_DIR_WAR_FILES=("${S2I_SOURCE_DIR}"/*.war)
      INPUT_FILE="${SOURCE_DIR_WAR_FILES[0]}"

      log_info "Found ${INPUT_FILE}"
      unzip -l "${INPUT_FILE}" | grep -q META-INF/server-config.xml
      HAS_MANAGED_SERVER_MARKER="$?"
      if [ "$HAS_MANAGED_SERVER_MARKER" -eq 0 ]; then
        create_managed_server_from_metadata
      else
        log_error "Not a server home directory, exiting."
        exit 1
      fi
     fi
  fi
  chmod -R ug+rwX $JBOSS_HOME
} 

function create_managed_server_from_metadata() {
    #mkdir server-builder
    #cd server-builder

    #MANAGED_SERVER_BUILDER_TOOL="/tmp/artifacts/wildfly-managed-server-builder-tool.jar"
    #log_info "Preparing server builder project."
    #java -Dwildfly.builder.war.location="${INPUT_FILE}" -Dwildfly.builder.server.image.builder.location=. -jar "${MANAGED_SERVER_BUILDER_TOOL}"

    #log_info "Building server."
    #mvn install

    #log_info "Copying server to $JBOSS_HOME"
    #cp -r target/server "${JBOSS_HOME}"

    #log_info "Copying ${INPUT_FILE} to ${JBOSS_HOME}/standalone/deployments"
    #cp ${INPUT_FILE} "${JBOSS_HOME}/standalone/deployments"

    #log_info "Cleanup"
    #cd ..
    #rm -rf server-builder

    # Unzip the config files to known locations
    mkdir /tmp/managed-server-files
    unzip_file_to_directory "${INPUT_FILE}" "server-config.xml" "/tmp/managed-server-files"
    unzip_file_to_directory "${INPUT_FILE}" "server-init.cli" "/tmp/managed-server-files"
    unzip_file_to_directory "${INPUT_FILE}" "server-init.yml" "/tmp/managed-server-files"

    # Get the layers from server-config.xml and set GALLEON_PROVISION_LAYERS
    read_layers_from_server_config_xml "/tmp/managed-server-files/server-config.xml"

    # Set the required GALLEON_PROVISION_FEATURE_PACKS env var
    set_galleon_provision_feature_packs_env_var
    # TODO get layers from war, and also calculate the feature packs needed

    # Copy the war into /deployments - the provisioning will take care of copying it for us
    cp "${INPUT_FILE}" /deployments/ROOT.war

    # GALLEON_PROVISION_FEATURE_PACKS="wildfly@maven(org.jboss.universe:community-universe),org.wildfly.cloud:wildfly-cloud-galleon-pack:2.0.0.Alpha4"
    # GALLEON_PROVISION_LAYERS="cloud-server"
    log_info "Provisioning server with feature packs: ${GALLEON_PROVISION_FEATURE_PACKS} - and layers: ${GALLEON_PROVISION_LAYERS}"
    galleon_provision_server

    # TODO Adjustments to enable startup cli script and yaml

}

function unzip_file_to_directory() {
    zip_file="${1}"
    search_file="${2}"
    output_dir="${3}"

    # Check both META-INF/ and WEB-INF/classes/META-INF to give user some flexibility. Error if found in both places
    # For the '&& found_xxxx=1 || found_xxxx=0' end part of each command, the '1' is hit if the file could be extracted,
    # and the '0' if not

    unzip -p "${zip_file}" "META-INF/${search_file}" >> "${output_dir}/${search_file}" && found_meta_inf=1 || found_meta_inf=0
    unzip -p "${zip_file}" "WEB-INF/classes/META-INF/${search_file}" >> "${output_dir}/${search_file}" && found_web_inf=1 || found_web_inf=0

    if [ $found_meta_inf -eq 1 ] && [ found_web_inf -eq 0 ]; then
      log_error "Found ${search_file} in both META-INF/ and in WEB-INF/classes/META-INF/ of ${zip_file}. It should only be in one of the locations."
      exit 1
    fi
}

function set_galleon_provision_feature_packs_env_var() {
    validate_env_var_set "MANAGED_SERVER_SERVER_FEATURE_PACK"
    validate_env_var_set "MANAGED_SERVER_CLOUD_FEATURE_PACK_GA"
    validate_env_var_set "MANAGED_SERVER_CLOUD_FEATURE_PACK_VERSION"
    validate_env_var_set "MANAGED_SERVER_DATASOURCES_FEATURE_PACK_GA"
    validate_env_var_set "MANAGED_SERVER_DATASOURCES_FEATURE_PACK_VERSION"


    GALLEON_PROVISION_FEATURE_PACKS="${MANAGED_SERVER_SERVER_FEATURE_PACK},${MANAGED_SERVER_CLOUD_FEATURE_PACK_GA}:${MANAGED_SERVER_CLOUD_FEATURE_PACK_VERSION}"
    # TODO add datasources fp if needed
}

function validate_env_var_set() {
    if [ ! -v "${1}" ]; then
        echo "${1} is not set"
        exit 1
    fi
}

function read_layers_from_server_config_xml() {
    config_file="${1}"

    number_items=$(xmllint --xpath "count(//*[local-name()='server-config']/*[local-name()='layers']/*[local-name()='layer'])" "${config_file}")
    sep=""
    GALLEON_PROVISION_LAYERS=""

    for ((i=1; i<=number_items; i++)); do
        layer=$(xmllint --xpath "//*[local-name()='server-config']/*[local-name()='layers']/*[local-name()='layer']["${i}"]/text()" "$config_file")
        GALLEON_PROVISION_LAYERS="${GALLEON_PROVISION_LAYERS}${sep}${layer}"
        sep=","
    done
}